{"version":3,"sources":["../server/routes.spec.js"],"names":["request","require","sinon","sinonChai","chai","use","expect","pool","sandbox","create","rewire","server","afterEach","restore","beforeEach","done","timeout","query","err","resp","result","Error","describe","connectionStub","it","post","send","username","password","email","end","res","body","status","to","eql","message","owner"],"mappings":"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","file":"routes.spec.js","sourcesContent":["'use strict';\r\n\r\nconst request = require('supertest');\r\nconst sinon = require('sinon');\r\nconst sinonChai = require('sinon-chai');\r\nconst chai = require('chai');\r\nchai.use(sinonChai);\r\n\r\nconst expect = require('chai').expect;\r\nconst { pool } = require('./dbconfig.js');\r\nconst sandbox = sinon.sandbox.create();\r\nconst rewire = require('rewire');\r\n\r\n\r\nlet server = rewire('../dist/index.js');\r\n\r\nafterEach(() => {\r\n  //server = rewire('../dist/index.js');\r\n  sandbox.restore();\r\n});\r\n\r\nbeforeEach(function(done) {\r\n  this.timeout(5000);\r\n  //server = require('../dist/index.js');\r\n  pool.query('TRUNCATE users CASCADE');\r\n  pool.query('TRUNCATE blog CASCADE', (err, resp) => {\r\n    pool.query('INSERT INTO users VALUES ($1, $2, $3) RETURNING *',\r\n    ['Chris', 'test', 'chris@hotmail.com'],\r\n    (err, result) => {\r\n      if (err) { throw new Error('Error setting up tests')}\r\n      done();\r\n    });\r\n  });\r\n});\r\n\r\n\r\ndescribe('/POST add-user', () => {\r\n  let connectionStub;\r\n\r\n\r\n  it('adds a user', function(done) {\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-user')\r\n      .expect(200)\r\n      .timeout(5000)\r\n      .send({username: 'Nicole', password: 'test', email: 'nicole@gmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        const { username, email} = res.body;\r\n        expect(res.status).to.eql(200);\r\n        expect(username).to.eql('Nicole');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('returns error message if missing information', function(done) {\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-user')\r\n      .expect(500)\r\n      .timeout(5000)\r\n      .send({password: 'test', email: 'nicole@gmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        const { message} = res.body;\r\n        expect(res.status).to.eql(500);\r\n        expect(message).to.eql('Missing information');\r\n        done();\r\n      });\r\n  });\r\n\r\n  /*\r\n  it('should handle error with connection error', function(done) {\r\n    connectionStub = sandbox.stub(pool, 'connect').rejects(new Error('connection_error'));\r\n    console.log('connectionStub ', typeof connectionStub);\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-user')\r\n      .expect(200)\r\n      .timeout(5000)\r\n      .send({username: 'Nicole', password: 'test', email: 'nicole@gmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        console.log('this was called');\r\n        const { username, email} = res.body;\r\n        expect(res.status).to.eql(200);\r\n        expect(username).to.eql('Nicole');\r\n        done();\r\n    });\r\n  });\r\n\r\n  it('rolls back db after error before commit', (done) => {\r\n\r\n    done();\r\n  });*/\r\n});\r\n\r\ndescribe('/POST add-blog', () => {\r\n  it('adds a blog', function(done) {\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-blog')\r\n      .expect(200)\r\n      .timeout(5000)\r\n      .send({body: 'This is a blog', owner: 'chris@hotmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        const { body, owner} = res.body;\r\n        expect(res.status).to.eql(200);\r\n        expect(body).to.eql('This is a blog');\r\n        expect(owner).to.eql('chris@hotmail.com');\r\n        done();\r\n      })\r\n  });\r\n});"]}