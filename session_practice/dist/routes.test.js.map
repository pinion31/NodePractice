{"version":3,"sources":["../server/routes.test.js"],"names":["process","env","NODE_ENV","request","require","sinon","sinonChai","chai","use","expect","pool","sandbox","createSandbox","rewire","server","routes","connectionStub","afterEach","restore","beforeEach","done","timeout","query","err","resp","console","log","result","Error","describe","it","post","send","username","password","email","end","res","body","status","to","eql","message","abortStub","newRoute","__get__","__set__","owner"],"mappings":"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","file":"routes.test.js","sourcesContent":["'use strict';\r\nprocess.env.NODE_ENV = 'test';\r\n\r\nconst request = require('supertest');\r\nconst sinon = require('sinon');\r\nconst sinonChai = require('sinon-chai');\r\nconst chai = require('chai');\r\nchai.use(sinonChai);\r\n\r\nconst expect = require('chai').expect;\r\nlet { pool } = require('./dbconfig.js');\r\nconst sandbox = sinon.createSandbox();\r\nconst rewire = require('rewire');\r\n\r\nlet server = require('../dist/index.js');\r\nlet routes = rewire('../dist/routes.js');\r\n\r\nlet connectionStub;\r\n//let connectionStub = sinon.stub(router.__get__('shouldAbort'),'shouldAbort').rejects({message: 'connection_error'});\r\n\r\n//let shouldAbortStub =\r\nafterEach(() => {\r\n  sandbox.restore();\r\n\r\n  if (connectionStub) {\r\n    connectionStub.restore();\r\n  }\r\n\r\n});\r\n\r\nbeforeEach(function(done) {\r\n  this.timeout(5000);\r\n  //server = require('../dist/index.js');\r\n   //pool  = require('../dist/dbconfig.js').pool;\r\n\r\n  //server = require('../dist/index.js');\r\n // console.log('running beforeeach');\r\n  pool.query('TRUNCATE users CASCADE');\r\n // console.log('cascade');\r\n  pool.query('TRUNCATE blog CASCADE', (err, resp) => { console.log('inside query');\r\n    pool.query('INSERT INTO users VALUES ($1, $2, $3) RETURNING *',\r\n    ['Chris', 'test', 'chris@hotmail.com'],\r\n    (err, result) => {\r\n      if (err) { throw new Error('Error setting up tests')}\r\n        console.log('before each done');\r\n        pool  = require('../dist/dbconfig.js').pool;\r\n        //connectionStub = sinon.stub(pool,'connect').returns({message: 'connection_error'});\r\n        done();\r\n    });\r\n  });\r\n});\r\n\r\n//connectionStub = sinon.stub(pool,'connect').resolves({message: 'connection_error'});\r\n\r\ndescribe('/POST add-user', () => {\r\n  it('adds a user', function(done) {\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-user')\r\n      .expect(200)\r\n      .timeout(5000)\r\n      .send({username: 'Nicole', password: 'test', email: 'nicole@gmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        const { username, email} = res.body;\r\n        expect(res.status).to.eql(200);\r\n        expect(username).to.eql('Nicole');\r\n        done();\r\n      });\r\n  });\r\n\r\n\r\n\r\n  it('returns error message if missing information', function(done) {\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-user')\r\n      .expect(500)\r\n      .timeout(5000)\r\n      .send({password: 'test', email: 'nicole@gmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        const { message} = res.body;\r\n        expect(res.status).to.eql(500);\r\n        expect(message).to.eql('Missing information');\r\n\r\n        done();\r\n      });\r\n  });\r\n\r\n\r\n  it('should handle error with connection error', function(done) {\r\n    //connectionStub = sinon.stub(pool,'connect').rejects({message: 'connection_error'});\r\n   //let connectionStub = sinon.stub(pool,\"connect\").withArgs(true, {},{})\r\n    //console.log('pool', pool.connect());\r\n    //console.log('pool connect', pool.connect)\r\n    let abortStub = () => true;\r\n    let newRoute =  routes.__get__('shouldAbort');\r\n    routes.__set__('shouldAbort', abortStub);\r\n\r\n    console.log('trit', routes.__get__('shouldAbort'));\r\n\r\n    //console.log('routes', routes.__get__('shouldAbort'));\r\n    server = require('../dist/index.js');\r\n    routes = require('../dist/routes.js');\r\n    pool  = require('../dist/dbconfig.js').pool; // require again to break cache\r\n\r\n    //console.log('server', router.__get__('pool'));\r\n   //console.log('connectionStub', connectionStub);\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-user')\r\n      .expect(200)\r\n      .timeout(5000)\r\n      .send({username: 'NicoleTest', password: 'test', email: 'nicole@gmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        //connectionStub = sinon.stub(pool,'connect').rejects({message: 'connection_error'});\r\n        //console.log('server is', server);\r\n        console.log('res body', res.body);\r\n       // const { username, email} = res.body;\r\n         expect(res.status).to.eql(200);\r\n       // expect(username).to.eql('Nicole');\r\n        //connectionStub.restore();\r\n        done();\r\n    });\r\n  });\r\n\r\n  /*\r\n  it('rolls back db after error before commit', (done) => {\r\n\r\n    done();\r\n  });*/\r\n});\r\n\r\ndescribe('/POST add-blog', () => {\r\n  it('adds a blog', function(done) {\r\n    this.timeout(5000);\r\n    request(server)\r\n      .post('/add-blog')\r\n      .expect(200)\r\n      .timeout(5000)\r\n      .send({body: 'This is a blog', owner: 'chris@hotmail.com'})\r\n      .end((err, res) => {\r\n        if (err) throw err;\r\n        const { body, owner} = res.body;\r\n        expect(res.status).to.eql(200);\r\n        expect(body).to.eql('This is a blog');\r\n        expect(owner).to.eql('chris@hotmail.com');\r\n        done();\r\n      })\r\n  });\r\n});"]}