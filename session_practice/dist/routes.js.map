{"version":3,"sources":["../server/routes.js"],"names":["express","require","router","Router","pool","redis","client","createClient","shouldAbort","err","done","next","console","error","stack","query","Error","post","req","res","body","username","password","email","connect","status","json","message","log","response","rows","e","end","owner","set","get","reply","blogs","JSON","parse","rowCount","send","stringify","use","module","exports"],"mappings":"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","file":"routes.js","sourcesContent":["'use strict';\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst { pool } = require('./dbconfig.js');\r\n\r\nconst redis = require(\"redis\");\r\nconst client = redis.createClient();\r\nlet shouldAbort = (err, client, done, next) => {\r\n          if (err) {\r\n            console.error('Error in transaction', err.stack);\r\n            client.query('ROLLBACK', err => {\r\n              if (err) {\r\n                console.error('Error rolling back client', err.stack);\r\n              }\r\n              // release the client back to the pool\r\n              done();\r\n              return next(new Error(err));\r\n            });\r\n          }\r\n          return !!err;\r\n};\r\n\r\nrouter.post('/add-user', (req,res,next) => {\r\n  const { username, password, email } = req.body;\r\n\r\n  if (username && password && email) {\r\n    //console.log('starting', pool.connect);\r\n    try {\r\n      pool.connect((err, client, done) => {\r\n        if (err)  {\r\n         return res.status(500).json({message:'Cannot connect to server'});\r\n        }\r\n        console.log('connecting');\r\n\r\n\r\n        client.query('BEGIN', (err) => {\r\n          if (shouldAbort(err, client, done, next)) { return next(new Error(err)); }\r\n          client.query('INSERT INTO users VALUES ($1, $2, $3) RETURNING username, email',\r\n            [username, password, email],\r\n            (err, response) => {\r\n            if (shouldAbort(err, client, done, next)) { return next(new Error(err)); }\r\n            client.query('COMMIT', (err) => {\r\n                if (err) {\r\n                  return next(new Error(err));\r\n                }\r\n                console.log('committing');\r\n                res.status(200).json(response.rows[0]);\r\n                //res.end(\"done1\");\r\n                done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n    } catch(e) {\r\n      res.end(\"ERRORS\");\r\n      console.log('ERROR');\r\n    }\r\n  } else {\r\n    return res.status(500).json({message:'Missing information'});\r\n    done();\r\n  }\r\n});\r\n\r\n\r\nrouter.post('/add-blog', (req,res,next) => {\r\n  const { body, owner } = req.body;\r\n   // need to include (body,owner) or it will try to insert over serial id pk\r\n  pool.query('INSERT INTO blog(body, owner) VALUES ($1, $2) RETURNING body, owner',\r\n    [body, owner],\r\n    (err,response) => {\r\n      if (err) { return next(new Error(err)); }\r\n      client.set(owner, ''); //reset blog cache\r\n      res.status(200).json(response.rows[0]);\r\n    });\r\n});\r\n\r\nrouter.post('/get-blog', (req,res,next) => {\r\n  const { email } = req.body;\r\n\r\n  client.get(email, (err, reply) => { //check redis first\r\n    if (reply) {\r\n      return res.status(200).json({blogs: JSON.parse(reply)});\r\n    } else {\r\n      pool.query('SELECT * FROM blog WHERE owner = $1',\r\n        [email],\r\n        (err, response) => {\r\n          if (err) { return next(new Error(err))}\r\n          if (response.rowCount === 0) {\r\n            return res.send('User does not have any blogs');\r\n          }\r\n            client.set(email, JSON.stringify(response.rows));\r\n            res.status(200).json({blogs: response.rows});\r\n        });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.use((err,req,res,next) => {\r\n  if (err) {\r\n    res.send(err.message);\r\n  }\r\n});\r\n\r\nmodule.exports = router;"]}