{"version":3,"sources":["../../routes/routes.js"],"names":["express","require","router","Router","fs","path","readline","EventEmitter","dog","async","on","console","log","get","req","res","next","status","send","message","emit","end","rl","createInterface","input","process","stdin","output","stdout","question","name","close","execFile","child","err","stderr","shortTimeFunction","callback","setTimeout","mediumTimeFunction","longTimeFunction","parallel","results","error","readFile","createReadStream","resolve","__dirname","encoding","highWaterMark","writeFile","createWriteStream","chunk","newChunk","replace","write","use","data","JSON","parse","Error","module","exports"],"mappings":"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","file":"routes.js","sourcesContent":["'use strict';\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst readline = require('readline');\r\nconst EventEmitter = require('events');\r\nconst dog = new EventEmitter();\r\nconst async = require('async');\r\n\r\ndog.on('bark', () => {\r\n  console.log('Woof');\r\n});\r\n\r\nrouter.get('/hello', (req,res,next) => {\r\n    res.status(200).send({message: 'Hello'});\r\n});\r\n\r\nrouter.get('/bark', (req,res,next) => {\r\n  dog.emit('bark');\r\n  res.end('Bark');\r\n});\r\n\r\nrouter.get('/read-line', (req,res, next) => {\r\n  const rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n  });\r\n\r\n  rl.question('What is your name?', (name) => {\r\n    console.log(`Hello ${name}!`);\r\n    rl.close();\r\n    res.status(200).send(`Hello ${name}!`);\r\n  });\r\n});\r\n\r\nrouter.get('/spawn-process', (req,res,next) => {\r\n  const execFile = require('child_process').execFile;\r\n  const child = execFile('node', ['--version'], (err, stdout, stderr) => {\r\n    if (err) {\r\n    throw err;\r\n    }\r\n    console.log(stdout);\r\n  });\r\n});\r\n\r\nrouter.get('/async-callback', (req,res,next) => {\r\n  function shortTimeFunction(callback) {\r\n    setTimeout(function() {\r\n    callback(null, 'resultOfShortTime');\r\n  }, 200);\r\n  }\r\n  function mediumTimeFunction(callback) {\r\n    setTimeout(function() {\r\n    callback(null, 'resultOfMediumTime');\r\n  }, 500);\r\n  }\r\n  function longTimeFunction(callback) {\r\n    setTimeout(function() {\r\n    callback(null, 'resultOfLongTime');\r\n  }, 1000);\r\n  }\r\n    async.parallel([\r\n    shortTimeFunction,\r\n    mediumTimeFunction,\r\n    longTimeFunction\r\n    ],\r\n    function(err, results) {\r\n    if (err) {\r\n    return console.error(err);\r\n    }\r\n    res.send(results);\r\n    });\r\n});\r\n\r\nrouter.get('/read-file',(req,res,next) => {\r\n  try {\r\n    const readFile = fs.createReadStream(path.resolve(__dirname, 'test1.txt'), {encoding:'utf8', highWaterMark: 16 * 1024});\r\n    const writeFile = fs.createWriteStream(path.resolve(__dirname, 'write.txt'));\r\n\r\n    readFile.on('error', (error) => { // if file does not exist\r\n      next(error);\r\n    });\r\n\r\n    readFile.on('data', (chunk) => {\r\n      const newChunk = chunk.replace(/trump/gim, 'Orange Asshole'); // replace all instances of trump\r\n      writeFile.write(newChunk);\r\n    });\r\n\r\n    readFile.on('end', () => {\r\n      res.status(200).send('Done reading file');\r\n    });\r\n\r\n  } catch(err) {\r\n    return next(err);\r\n  }\r\n});\r\n\r\nrouter.use((err, req, res, next) => {\r\n  if (err) {\r\n    console.log('Error! ', err);\r\n  }\r\n\r\n  res.end();\r\n})\r\n\r\nrouter.get('/test-error', (req,res,next) => {\r\n  var data;\r\n\r\n  try {\r\n    data = JSON.parse('/file.json');\r\n\r\n  } catch (err) {\r\n    return next(err);\r\n  }\r\n\r\n  if (!data) {\r\n    throw new Error('Smth wrong');\r\n  }\r\n\r\n  res.status(200).send('OK');\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;"]}